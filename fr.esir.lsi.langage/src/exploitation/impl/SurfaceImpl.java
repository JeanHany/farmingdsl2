/**
 */
package exploitation.impl;

import exploitation.Atelier;
import exploitation.Exploitation;
import exploitation.ExploitationPackage;
import exploitation.Parcelle;
import exploitation.Surface;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentWithInverseEList;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Surface</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link exploitation.impl.SurfaceImpl#getExploitation <em>Exploitation</em>}</li>
 *   <li>{@link exploitation.impl.SurfaceImpl#getParcelle <em>Parcelle</em>}</li>
 *   <li>{@link exploitation.impl.SurfaceImpl#getAtelier <em>Atelier</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class SurfaceImpl extends MinimalEObjectImpl.Container implements Surface {
	/**
	 * The cached value of the '{@link #getParcelle() <em>Parcelle</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getParcelle()
	 * @generated
	 * @ordered
	 */
	protected EList<Parcelle> parcelle;

	/**
	 * The cached value of the '{@link #getAtelier() <em>Atelier</em>}' containment reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getAtelier()
	 * @generated
	 * @ordered
	 */
	protected Atelier atelier;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SurfaceImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExploitationPackage.Literals.SURFACE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Exploitation getExploitation() {
		if (eContainerFeatureID() != ExploitationPackage.SURFACE__EXPLOITATION) return null;
		return (Exploitation)eInternalContainer();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetExploitation(Exploitation newExploitation, NotificationChain msgs) {
		msgs = eBasicSetContainer((InternalEObject)newExploitation, ExploitationPackage.SURFACE__EXPLOITATION, msgs);
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setExploitation(Exploitation newExploitation) {
		if (newExploitation != eInternalContainer() || (eContainerFeatureID() != ExploitationPackage.SURFACE__EXPLOITATION && newExploitation != null)) {
			if (EcoreUtil.isAncestor(this, newExploitation))
				throw new IllegalArgumentException("Recursive containment not allowed for " + toString());
			NotificationChain msgs = null;
			if (eInternalContainer() != null)
				msgs = eBasicRemoveFromContainer(msgs);
			if (newExploitation != null)
				msgs = ((InternalEObject)newExploitation).eInverseAdd(this, ExploitationPackage.EXPLOITATION__SURFACE, Exploitation.class, msgs);
			msgs = basicSetExploitation(newExploitation, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.SURFACE__EXPLOITATION, newExploitation, newExploitation));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<Parcelle> getParcelle() {
		if (parcelle == null) {
			parcelle = new EObjectContainmentWithInverseEList<Parcelle>(Parcelle.class, this, ExploitationPackage.SURFACE__PARCELLE, ExploitationPackage.PARCELLE__SURFACE);
		}
		return parcelle;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Atelier getAtelier() {
		return atelier;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NotificationChain basicSetAtelier(Atelier newAtelier, NotificationChain msgs) {
		Atelier oldAtelier = atelier;
		atelier = newAtelier;
		if (eNotificationRequired()) {
			ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, ExploitationPackage.SURFACE__ATELIER, oldAtelier, newAtelier);
			if (msgs == null) msgs = notification; else msgs.add(notification);
		}
		return msgs;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setAtelier(Atelier newAtelier) {
		if (newAtelier != atelier) {
			NotificationChain msgs = null;
			if (atelier != null)
				msgs = ((InternalEObject)atelier).eInverseRemove(this, ExploitationPackage.ATELIER__SURFACE, Atelier.class, msgs);
			if (newAtelier != null)
				msgs = ((InternalEObject)newAtelier).eInverseAdd(this, ExploitationPackage.ATELIER__SURFACE, Atelier.class, msgs);
			msgs = basicSetAtelier(newAtelier, msgs);
			if (msgs != null) msgs.dispatch();
		}
		else if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.SURFACE__ATELIER, newAtelier, newAtelier));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public NotificationChain eInverseAdd(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				if (eInternalContainer() != null)
					msgs = eBasicRemoveFromContainer(msgs);
				return basicSetExploitation((Exploitation)otherEnd, msgs);
			case ExploitationPackage.SURFACE__PARCELLE:
				return ((InternalEList<InternalEObject>)(InternalEList<?>)getParcelle()).basicAdd(otherEnd, msgs);
			case ExploitationPackage.SURFACE__ATELIER:
				if (atelier != null)
					msgs = ((InternalEObject)atelier).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - ExploitationPackage.SURFACE__ATELIER, null, msgs);
				return basicSetAtelier((Atelier)otherEnd, msgs);
		}
		return super.eInverseAdd(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				return basicSetExploitation(null, msgs);
			case ExploitationPackage.SURFACE__PARCELLE:
				return ((InternalEList<?>)getParcelle()).basicRemove(otherEnd, msgs);
			case ExploitationPackage.SURFACE__ATELIER:
				return basicSetAtelier(null, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eBasicRemoveFromContainerFeature(NotificationChain msgs) {
		switch (eContainerFeatureID()) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				return eInternalContainer().eInverseRemove(this, ExploitationPackage.EXPLOITATION__SURFACE, Exploitation.class, msgs);
		}
		return super.eBasicRemoveFromContainerFeature(msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				return getExploitation();
			case ExploitationPackage.SURFACE__PARCELLE:
				return getParcelle();
			case ExploitationPackage.SURFACE__ATELIER:
				return getAtelier();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				setExploitation((Exploitation)newValue);
				return;
			case ExploitationPackage.SURFACE__PARCELLE:
				getParcelle().clear();
				getParcelle().addAll((Collection<? extends Parcelle>)newValue);
				return;
			case ExploitationPackage.SURFACE__ATELIER:
				setAtelier((Atelier)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				setExploitation((Exploitation)null);
				return;
			case ExploitationPackage.SURFACE__PARCELLE:
				getParcelle().clear();
				return;
			case ExploitationPackage.SURFACE__ATELIER:
				setAtelier((Atelier)null);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExploitationPackage.SURFACE__EXPLOITATION:
				return getExploitation() != null;
			case ExploitationPackage.SURFACE__PARCELLE:
				return parcelle != null && !parcelle.isEmpty();
			case ExploitationPackage.SURFACE__ATELIER:
				return atelier != null;
		}
		return super.eIsSet(featureID);
	}

} //SurfaceImpl
